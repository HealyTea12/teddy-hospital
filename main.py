import mimetypes
import os
from typing import Union

import qrcode
import toml
import uvicorn
from anyio import Path
from fastapi import FastAPI, Query, Response
from fastapi.responses import FileResponse
from pydantic import BaseModel
from seafileapi import SeafileAPI

from storage import SeafileStorage, Storage

app = FastAPI()


class Config:
    storage: list[Storage]
    debug: bool = False

    def __init__(self, config_file: str):
        self.config_file = config_file
        config = toml.load(config_file)
        self.storage = []
        for s in config.get("storage", {}).get("seafile", []):
            self.storage.append(
                SeafileStorage(
                    s.get("SEAFILE_USERNAME"),
                    s.get("SEAFILE_PASSWORD"),
                    s.get("SEAFILE_URL"),
                    s.get("SEAFILE_LIBRARY_NAME"),
                )
            )
        self.debug = config.get("DEBUG", False)


class Teddy(BaseModel):
    normal_url: str
    xray_url: str


@app.get(
    "/qr",
    responses={200: {"content": {"image/png": {}}}},
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
def gen_qr_codes(n: int = Query(ge=0, le=1000)):
    qrs = []
    for i in range(n):
        url = config.storage[0].create_folder(f"/{i}")
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(f"{url}")
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        img.save(f"qrs/qr_{i}.png")
        qrs.append(f"qr_{i}.png")
    return FileResponse(
        path=f"qrs/qr_{n-1}.png",
        media_type="image/png",
        filename=f"qr_{n-1}.png",
    )
    # return Response(content=, media_type="image/png")


if __name__ == "__main__":
    config = Config("config.toml")
    uvicorn.run(app, host="0.0.0.0", port=8000)
