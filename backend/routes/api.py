import os
from typing import Annotated, Mapping, Tuple

import qrcode
import reportlab.pdfgen.canvas
from anyio import SpooledTemporaryFile
from fastapi import APIRouter, File, Form, Header, Query, Response
from fastapi.responses import FileResponse
from pydantic import BaseModel

from backend.routes.jobqueue import Job, JobQueue

from ..config import config

router = APIRouter()
job_queue = JobQueue(config.results_per_image, config.carrousel_size, config.storage[0])


@router.get(
    "/qr",
    responses={200: {"content": {"application/pdf": {}}}},
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
def gen_qr_codes(n: int = Query(ge=0, le=1000)):
    qrs = []
    for i in range(n):
        url = config.storage[0].create_storage_for_user()
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(f"{url}")
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        qrs.append(img)
        qr.clear()

    gen_qr_pdf(qrs)
    if n > 0:
        return FileResponse(
            path="qr.pdf",
            media_type="application/pdf",
            filename="qr.pdf",
        )
    else:
        return Response(content="No QR codes generated", media_type="text/plain")


def gen_qr_pdf(qrs: list, size: int = 100):
    """
    qrs: list qrcode images
    """
    X_BORDER, Y_BORDER, X_SPACING, Y_SPACING = 30, 30, 10, 10
    c = reportlab.pdfgen.canvas.Canvas("qr.pdf")
    x, y = X_BORDER, Y_BORDER
    for i, img in enumerate(qrs):
        # TODO: this is a hack solution, should draw image from memory and not have to save into file
        os.makedirs("temp", exist_ok=True)
        img.save(f"temp/temp_{i}.png")
        c.drawImage(f"temp/temp_{i}.png", x, y, width=size, height=size)
        x += size + X_SPACING
        if x > 500:
            x = X_BORDER
            y += size + Y_SPACING
    c.save()


from fastapi import UploadFile


@router.post(
    "/upload/",
    responses={200: {"content": {"application/json": {}}}},
)
async def create_upload_file(file: UploadFile, uid: int | str = 0):
    """
    Receive image of a teddy and user id or upload link so that we know where to save later.
    the image itself also gets an id so it can be referenced later when receiving results
    from AI.
    """
    f = SpooledTemporaryFile()
    await f.write(file.file.read())
    job = Job(file=f, owner_ref=uid)
    job_queue.add_job(job)
    return {"status": "success", "current_jobs": len(job_queue.queue)}


@router.get(
    "/job",
    responses={200: {"content": {"image/png": {}}}},
    response_class=Response,
)
async def get_job():
    """
    Get job from the queue. Returns an image with an id.
    """
    job = job_queue.get_job()
    if job is None:
        return Response(content="No Jobs in queue", media_type="text/plain")
    file, job_id = job
    await file.seek(0)
    response = Response(content=await file.read())
    response.headers["Content-Type"] = "image/png"
    response.headers["img_id"] = str(job_id)
    return response


@router.post("/job", responses={200: {"content": {"application/json": {}}}})
async def conclude_job(
    image_id: Annotated[int, Header()], result: Annotated[bytes, File()]
):
    f = SpooledTemporaryFile()
    await f.write(result)
    job_queue.submit_job(image_id, f)
    return {"status": "success"}


@router.get("/confirm")
async def confirm_job(
    image_id: Annotated[int, Query()],
    choice: Annotated[int, Query()],
    confirm: Annotated[bool, Query()],
):
    await job_queue.confirm_job(image_id, confirm, choice)
    return {"status": "success"}
